from telegram import Update
from telegram.ext import CallbackContext
from outline_vpn.outline_vpn import OutlineVPN
from .config import OUTLINE_API_URL, CERT_SHA256
from .utils import restricted  # –ò–º–ø–æ—Ä—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import json
from urllib.parse import urlparse
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OutlineAPI
outline_client = OutlineVPN(OUTLINE_API_URL, CERT_SHA256)

keys = []

def update_keys():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
        global keys
        keys = outline_client.get_keys()
       
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")


def find_key(keys, input_value):
    """–ò—â–µ—Ç –∫–ª—é—á –ø–æ –∏–º–µ–Ω–∏, ID –∏–ª–∏ access_url."""
    
    # –ò—â–µ–º –∫–ª—é—á –ø–æ –∏–º–µ–Ω–∏
    for k in keys:
        if " ".join(getattr(k, 'name', '').lower()) == " ".join(input_value[0].lower()):
            return k
        if str(k.key_id) == input_value:
            return k
        if str(k.access_url) == input_value:
            return k

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None


@restricted
async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º Outline.\n\n"
        "üìù <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n\n"
        "üöÄ <b>/start</b> - –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë —Ä–∞–∑ –Ω–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
        "üñ• <b>/server_info</b> - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ Outline VPN.\n\n"
        "üîë <b>/list</b> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏.\n\n"
        "‚ûï <code>/add </code>&lt;–∏–º—è&gt; - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á. –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
        "‚ùå <code>/delete </code>&lt;–∏–º—è|id|–∫–ª—é—á&gt; - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á.\n\n"
        "üìä <code>/limit </code>&lt;–∏–º—è|id|–∫–ª—é—á&gt; - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –¥–æ –Ω—É–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.\n\n"
        "üö´ <code>/rem_limit </code>&lt;–∏–º—è|id|–∫–ª—é—á&gt; - –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.\n\n"
        "üìÅ <code>/key_info </code>&lt;–∏–º—è|id|–∫–ª—é—á&gt; - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ.\n\n"
        "üì• <code>/key_file </code>&lt;–∏–º—è|id|–∫–ª—é—á&gt; - –°–∫–∞—á–∞—Ç—å JSON —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–µ.\n\n"
    )

    await update.message.reply_text(text, parse_mode='HTML')
    update_keys()


@restricted
async def list_keys(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    message = None

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /list, –∏—Å–ø–æ–ª—å–∑—É–µ–º message, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query
    if update.message:
        message = update.message
        update_keys()

    elif query:
        message = query.message

    try:
        if not keys:
            await message.reply_text("üîì –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π.", parse_mode='HTML')
            return

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        limit = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ offset –≤ —Å–ª—É—á–∞–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
        offset = int(query.data.split('_')[1]) if query else (int(context.args[0]) if context.args else 0)

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        paginated_keys = keys[offset:offset + limit]

        if not paginated_keys:
            await message.reply_text("üîì –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", parse_mode='HTML')
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–∞–º–∏
        message_text = "üîë <b>–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:</b>\n\n"
        message_parts = []
        for key in paginated_keys:
            key_id = getattr(key, "key_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
            name = getattr(key, "name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            data_limit = getattr(key, "data_limit", "No limit") if getattr(key, "data_limit", None) else "No limit"
            access_url = getattr(key, "access_url", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            message_parts.append(
                f"<b>- ID:</b> {key_id},\n"
                f"<b>- –ò–º—è:</b> {name},\n"
                f"<b>- –¢—Ä–∞—Ñ–∏–∫:</b> {data_limit},\n"
                f"<b>üîó</b> <code>{access_url}</code>\n\n"
            )

        message_text += "".join(message_parts)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = []
        if offset > 0:
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"list_{offset - limit}")])

        if offset + limit < len(keys):
            keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f"list_{offset + limit}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /list, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if not query:
            await message.reply_text(message_text, parse_mode='HTML', reply_markup=reply_markup)
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            await message.edit_text(message_text, parse_mode='HTML', reply_markup=reply_markup)

    except Exception as e:
        await message.reply_text(
            f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π:</b> {e}", 
            parse_mode='HTML'
        )


@restricted
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫)
async def handle_pagination(update: Update, context: CallbackContext):
    await list_keys(update, context)


@restricted
async def add_key(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
        key_name = ""  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if context.args:
            key_name = " ".join(context.args)  # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É

        new_key = outline_client.create_key(name=key_name)  

        # –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
        key_id = new_key.key_id
        access_url = new_key.access_url

        message = (
            "‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"<b>- ID:</b>  {key_id}\n\n"
            f"<b>- –ò–º—è:</b>  {key_name}\n\n"
            f"üîó  <code>{access_url}</code>\n\n" 
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outline. "
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ! üõ°Ô∏è"
        )
        update_keys()
        await update.message.reply_html(message)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
    except AttributeError as e:
        await update.message.reply_html("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
    except Exception as e:
        await update.message.reply_html("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.")

@restricted
async def delete_key(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete <–∏–º—è|id|–∫–ª—é—á>"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–∏–º—è|id|–∫–ª—é—á>")
        return
    
    try:
        key = find_key(keys, context.args)

        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
        if key:
            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á
            status = outline_client.delete_key(key.key_id)  
            if status:
                await update.message.reply_text(f"‚úÖ –ö–ª—é—á —Å ID {key.key_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
                await update_keys()
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.")

@restricted
async def limit_traffic(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /limit, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –¥–æ –Ω—É–ª—è."""
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /limit <–∏–º—è|id|–∫–ª—é—á>")
        return
    try:
        key = find_key(keys, context.args)

        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫
        if key:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ –¥–æ –Ω—É–ª—è
            status = outline_client.add_data_limit(key.key_id, 0)
            if status:
                await update.message.reply_text(f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–ª—é—á–∞ {key.key_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ –Ω—É–ª—è.")
                update_keys()
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞.")

@restricted
async def remove_limit(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rem_limit <–∏–º—è|id|–∫–ª—é—á>, —Å–Ω–∏–º–∞–µ—Ç –ª–∏–º–∏—Ç —Å —Ç—Ä–∞—Ñ–∏–∫–∞."""
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rem_limit <–∏–º—è|id|–∫–ª—é—á>")
        return
    
    try:
        key = find_key(keys, context.args)

        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, —Å–Ω–∏–º–∞–µ–º –ª–∏–º–∏—Ç —Å —Ç—Ä–∞—Ñ–∏–∫–∞
        if key:
            # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫
            status = outline_client.delete_data_limit(key.key_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é delete_data_limit –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞
            if status:
                await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–ª—é—á–∞ {key.key_id} —Å–Ω—è—Ç.")
                update_keys()
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.")

@restricted
async def server_info(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /serverinfo"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_info = outline_client.get_server_information()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ
        transferred_data = outline_client.get_transferred_data().get("bytesTransferredByUserId", {})

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Ö —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º
        keys = outline_client.get_keys()
        user_data = [
            {
                "name": key.name,
                "id": key.key_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º key_id
                "traffic": transferred_data.get(str(key.key_id), 0)  # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å key_id
            }
            for key in keys
        ]

        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        total_traffic = sum(user["traffic"] for user in user_data)  # –°—É–º–º–∞—Ä–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
        user_count = len(user_data)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            "üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ Outline VPN\n\n"
            f"–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {server_info.get('version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
            f"–°—É–º–º–∞—Ä–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: {total_traffic / (1024 ** 3):.2f} –ì–ë\n\n"
            "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        for i, user in enumerate(user_data):
            message += f"{i+1}. {user['name']} (ID: {user['id']}): {user['traffic'] / (1024 ** 3):.2f} –ì–ë\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_html(message)

    except Exception as e:
        await update.message.reply_html("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ.")


@restricted
async def key_info(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /key_info <–∏–º—è|id|–∫–ª—é—á> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /key_info <–∏–º—è|id|–∫–ª—é—á>")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ —Å –ø–æ–º–æ—â—å—é –∫–ª–∏–µ–Ω—Ç–∞
        key = find_key(keys, context.args)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞
        if not key:
            await update.message.reply_html("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—è access_url (–µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if hasattr(key, 'access_url') and key.access_url:
            url = urlparse(key.access_url)
            server_address = url.hostname
            server_port = url.port
        else:
            server_address = "–ù–µ —É–∫–∞–∑–∞–Ω"
            server_port = "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–µ
        key_info = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ {key.key_id}:</b>\n\n"
            f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {key.name}\n"
            f"<b>–°–µ—Ä–≤–µ—Ä:</b> {server_address}\n"
            f"<b>–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞:</b> {server_port}\n"
            f"<b>–ü–∞—Ä–æ–ª—å:</b> {getattr(key, 'password', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<b>–ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:</b> {getattr(key, 'method', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞:</b> {(outline_client.get_transferred_data().get('bytesTransferredByUserId', {}).get(str(key.key_id), 0) / (1024 ** 3)):.2f} –ì–ë\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–µ
        await update.message.reply_html(key_info)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await update.message.reply_html(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ: {e}")


@restricted
async def key_file(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /keyfile <–∏–º—è|id|–∫–ª—é—á>, –≤–æ–∑—Ä–∞—â–∞–µ—Ç json —Ñ–∞–π–ª"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /keyfile <–∏–º—è|id|–∫–ª—é—á>")
        return
    
    try:
        key = find_key(keys, context.args)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞
        if not key:
            await update.message.reply_html("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ access_url
        if hasattr(key, 'access_url') and key.access_url:
            url = urlparse(key.access_url)
            server_address = url.hostname
            server_port = url.port
        else:
            server_address = "–ù–µ —É–∫–∞–∑–∞–Ω"
            server_port = "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
        response = {
            "server": server_address, # IP —Å–µ—Ä–≤–µ—Ä–∞
            "server_port": server_port,  # –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
            "password": key.password if hasattr(key, 'password') else "–ù–µ —É–∫–∞–∑–∞–Ω",  # –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            "timeout": "300",  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            "method": key.method if hasattr(key, 'method') else "–ù–µ —É–∫–∞–∑–∞–Ω",  # –ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            "fast_open": "True"  # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª
        file_path = f"config_{key.key_id}.json"
        with open(file_path, "w", encoding="utf-8") as json_file:
            json.dump(response, json_file, ensure_ascii=False, indent=2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(file_path, "rb") as json_file:
            await update.message.reply_document(document=json_file, filename=file_path)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(file_path)

    except Exception as e:
        await update.message.reply_html(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")